#### BACKEND ####
# flask ClusterIP service
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
  - port: 32173
    targetPort: 32173 
---
# flask NodePort service for external querries
# apiVersion: v1
# kind: Service
# metadata:
#   name: backend-external
# spec:
#   type: NodePort
#   selector:
#     app: backend
#   ports:
#   - port: 32173
#     targetPort: 32173 
#     nodePort: 32173
# ---
# flask api deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: bernnardooliveira
  name: backend
spec:
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
      # k8s pull images from dockerhub by default
        image: bernnardosbo/backend:ga-13
        resources:
          limits:
            memory: "1000Mi"
            cpu: "1000m"
        ports:
        - containerPort: 32173
        volumeMounts:
        - name: persistent-storage
          mountPath: /data
        # command: ["python"]
        # args: ["/app/app.py"]
      volumes:
      - name: persistent-storage
        persistentVolumeClaim:
          claimName: project2-pvc-bernnardooliveira
  replicas: 1
---
### FRONTEND ###
# react-nginx NodePort service
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
    nodePort: 32000
---
# react-nginx deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: bernnardooliveira
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: bernnardosbo/nginx-frontend:ga-9
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "1000Mi"
            cpu: "1000m"
            

